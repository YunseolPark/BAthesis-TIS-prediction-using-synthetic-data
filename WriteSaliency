import numpy as np

def FindConsensus(nucleotidesList, pattern, pos, check):
    c = 0
    l1 = check
    l2 = len(pattern)-check-3
    for ind,n in zip(range(len(pattern)),range(149-l1,152+l2)):
        nucs = nucleotidesList[pos][n]
        if pattern[ind] !='*' and type(pattern[ind]) != list and nucs != pattern[ind]:
            break
        elif pattern[ind] != '*' and type(pattern[ind]) == list and nucs not in pattern[ind]:
            break
        else:
            c += 1
    if c == len(pattern):
        return pos
    else:
        return None

def Lines(filename,pattern):
    import re
    allLines = open(filename).readlines()
    m = [[float(x) for x in allLines[i].strip().split(',')] for i in range(0,len(allLines),3)]
    #nucleotides in a sequence
    nuc = [allLines[i].rstrip().split(',') for i in range(1,len(allLines),3)]
    #scores in a sequence
    score = [[float(a) for a in allLines[i].rstrip().split(',')] for i in range(2,len(allLines),3)]

    patternList = [i for i in pattern]
    for j in range(len(patternList)-3):
        if patternList[j] == 'A' and patternList[j+1] == 'T' and patternList[j+2] == 'G':
            check = j

    nucleotidesList = []
    scoresList = []
    for i in range(0, len(m)):
        if m[i][0]<=0.5 and m[i][1]==1:
            nucleotidesList.append(nuc[i])
            scoresList.append(score[i])

    newlist = []
    newscore = []
    for i in range(len(nucleotidesList)):
        position = FindConsensus(nucleotidesList,patternList,i,check)
        if position != None:
            newlist.append(nucleotidesList[position])
            newscore.append(scoresList[position])

    return newlist, newscore

def getScores(nucleotidesList, scoresList, pos):
    scores = {'A': [], 'C': [], 'G': [], 'T': []}
    for nucs,scrs in zip(nucleotidesList,scoresList):
        n = nucs[pos]
        s = scrs[pos]

        scores[n].append(s)

    for k,v in scores.items():
        if v == []:
            scores[k] = 0.0
            continue
        elif len(v) == 1:
            scores[k] = v[0]
            continue
        else:
            scores[k] = np.mean(v)

    hscr = 0.0
    hnuc = ''
    for k,v in scores.items():
        if abs(v) > abs(hscr):
            hscr = v
            hnuc = k

    scores[hnuc] = hscr
    for k,v in scores.items():
        if k != hnuc:
            scores[k] = 0.0

    return scores

def WriteSaliency(input,output,pattern):
    import pandas as pd

    nucleotidesList, scoresList = Lines(input,pattern)
    salscr = {'A': [], 'C': [], 'G': [], 'T': []}
    for pos in range(len(nucleotidesList[0])):
        s = getScores(nucleotidesList,scoresList,pos)
        salscr['A'].append(s['A'])
        salscr['C'].append(s['C'])
        salscr['G'].append(s['G'])
        salscr['T'].append(s['T'])
    saliency = pd.DataFrame(salscr)
    print(saliency)
    saliency.to_pickle('{}.txt'.format(output))


WriteSaliency('SBBM2.txt', 'SBBMsaliency', 'A**ATGGC')
WriteSaliency('RBBM1.txt', 'RBBMsaliency', 'A**ATGGC')
WriteSaliency('CBBM1.txt', 'CBBMsaliency', 'A**ATGGC')
